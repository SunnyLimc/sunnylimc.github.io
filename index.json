[{"categories":null,"content":"概念 内部类(inner class) 是定义在一个类或方法中的类 而内部类中，也有几个分类： 非静态内部类（声明在类中的类） 静态内部类（声明在类中的静态类） 局部内部类（声明在方法中的类） 匿名内部类（声明在语句中的类） 这篇文章，就让我带大家了解这些内部类的特性，并浅谈它们的实现原理 非静态内部类 ","date":"2021-06-12","objectID":"/first_post/:0:0","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"示例 非静态内部类的内容全部围绕示例展开，示例中的内部类为非静态内部类 class TestClass { public int username; private int password; class InnerClass { int status; } } ","date":"2021-06-12","objectID":"/first_post/:1:0","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"实例化内部类 把内部类声明为public和默认的可见性是一样的，你可能会想看权限修饰符 ","date":"2021-06-12","objectID":"/first_post/:2:0","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"外部类 class TestClass { ... public InnerClass instance() { return new InnerClass(); // 等价的 return this.new InnerClass(); } ... } ","date":"2021-06-12","objectID":"/first_post/:2:1","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"同包下其他类 必须使用外部类的对象才能对非静态内部类进行实例化 由于内部类对同一个包下的其他类是隐藏的，所以在使用时需先引用外部类，通过外部类来引用内部类，如TestClass.InnerClass public static void main(String[] args) { TestClass testClass = new TestClass(); TestClass.InnerClass inner = testClass.new InnerClass(); } ","date":"2021-06-12","objectID":"/first_post/:2:2","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"非同包下其他类 除非内部类在被声明为 public 的外部类中，否则非同包下其他类无法访问 ","date":"2021-06-12","objectID":"/first_post/:2:3","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"私有化内部类 class TestClass { ... private class InnerClass { int status; } ... } 将内部类声明为private后，则只能从外部类的方法中访问内部类。因为我们无法从其他类中访问一个类的私有属性。 ","date":"2021-06-12","objectID":"/first_post/:2:4","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"使用内部类访问外部对象 ","date":"2021-06-12","objectID":"/first_post/:3:0","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"访问public属性 在实例化内部类时，编译器会为内部对象创建一个指向外部对象的常量隐式引用(变量) TestClass this$0 编译器会修改内部类的构造函数，且在实例化时自动把外部类的this指针传入内部类的构造函数，构造函数再为this$0这个隐式引用赋值 在正常的编码使用上，我们需要使用 TestClass.this，由编译器来帮我们完成转化为this$0的过程，具体可见下方示例 当内部对象需要访问外部对象的变量时，如果内部类中没有声明与外部类同名的变量，以此处的username为例，编译器会自动替换username为TestClass.this.username，从而让内部类能正确访问外部对象的变量 示例 class TestClass { public int username; class InnerClass { public void print() { System.out.println(username); // 等价的 System.out.println(TestClass.this.username); } ... } } ","date":"2021-06-12","objectID":"/first_post/:3:1","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"访问private属性 内部类与其他类不同的其中一个地方就是可以直接访问外部类的私有数据。但我们知道，用隐式引用this$0的方式肯定是没有足够的权限访问外部类的私有变量的 因为这只是拿到了外部类实例化的对象，但是除了使用反射外，我们不能直接访问对象的私有属性 所以 Java 使用了不一样的实现方法。以访问 TestClass 的私有变量 password 为例，若编译器检测到你访问的是对象的私有属性，编译器会自动为外部类添加一个静态的方法int access$0(TestClass) int access$0(TestClass)方法接受一个 TestClass 对象作为参数，并返回该对象的 password 属性，让内部类可以通过TalkingClock.access$0(this$0)来拿到外部类的 password 属性 这可能存在安全风险，因为这相当于运行阶段在外部类中直接加入了一个可以访问其私有属性的方法。 ","date":"2021-06-12","objectID":"/first_post/:4:0","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"静态属性 ","date":"2021-06-12","objectID":"/first_post/:5:0","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"静态方法 Java 没有对非静态内部类声明静态方法进行任何的限制 但如果声明的方法是静态方法，则其只允许访问外部类的静态属性 ","date":"2021-06-12","objectID":"/first_post/:5:1","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"静态属性 在JDK 16之前，不允许在非静态内部类中声明非常量的静态变量 但在JDK 16及之后，就没有这个限制了 ","date":"2021-06-12","objectID":"/first_post/:5:2","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"后记 如果你不需要对外部类对象的引用(this$0)，一般来说更推荐声明一个静态内部类 静态内部类 ","date":"2021-06-12","objectID":"/first_post/:6:0","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"示例 class TestClass { static class InnerClass { ... } } ","date":"2021-06-12","objectID":"/first_post/:6:1","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"特性 静态内部类中没有静态属性的限制 除了没有对外部类对象的引用之外，其他特性与非静态内部类一致 ","date":"2021-06-12","objectID":"/first_post/:6:2","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"其他 在接口中声明的内部类自动是静态内部类 局部内部类 Java允许在方法中声明局部内部类(方法内部类)，供方法本身进行使用。 ","date":"2021-06-12","objectID":"/first_post/:6:3","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"实例化 class TestClass { public void instance() { class Inner { ... } Inner instance = new Inner(); } } ","date":"2021-06-12","objectID":"/first_post/:6:4","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"特性 局部内部类对外部是完全隐藏的。除了方法本身外，没有任何人知道局部内部类的存在 局部内部类能直接访问对象的內部属性，不过在访问方法的局部变量时会有所限制 局部内部类声明时不能带有权限修饰符(public、private) ","date":"2021-06-12","objectID":"/first_post/:6:5","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"访问方法的局部变量 局部内部类可以直接读取方法中声明的局部变量。 实例 class TestClass { public void instance() { int[] a = {1, 2}; // wrong final int[] a = {1, 2}; // correct int test; // 演示如何读取局部变量 class Inner { public void edit() { a[0] = 1; // 由于数组是对象，所以写值的操作被允许 } } new Inner().edit(); } } 这里的原理跟非静态内部类访问 public 属性非常相似，编译器会为内部类生成与方法局部变量的对应的内部类属性并修改构造函数，让方法的局部变量在实例化内部类时通过构造函数传递到内部类的属性中 就如同这里方法的test变量，编译器会为内部类生成一个final int test 属性，然后通过构造函数将方法的test变量传递到内部类的final int test属性中，从而允许内部类进行访问 那能否写入方法中声明的局部变量呢? 这里的能否写入其实与传入的方法变量的类型有关，由于传入之后内部类中生成的是final 类型的属性，我们不难得出以下结论： 如果传入的是基本类型，基本类型的值是属性引用的对象，故值不可变 而如果传递的是一个对象的引用，则只是对象的引用不可变，而对象的内部属性是可变的 (如数组、ArrayList等) 匿名内部类 匿名内部类可以在不为类指定名字的情况下，直接继承或实现一个类或接口，并直接生成其对象 new ExtendClassName(ConstructParam){ // 匿名内部类的内容 }.FunctionName(FunctionParam); // 或 new InterfaceName(){ // 匿名内部类的内容 }.FunctionName(FunctionParam); ","date":"2021-06-12","objectID":"/first_post/:6:6","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"继承 简而言之，就是匿名继承一个类，并直接获得一个其继承后的匿名对象 由于匿名内部类没有类名，也自然不能有任何构造器。构造器的参数会传递到父类(super)里面 注意如果将对象保存并向上转型，会丢失匿名内部类的方法 实例 — 向构造器传递参数、调用父类方法、输出重写方法 class TestClass { public void instance() { // 用匿名内部类重写Date类方法并调用其输出 // 只作演示，没有实际作用 System.out.println( new Date(114513L) { @Override public long getTime() { return super.getTime() + 1; } }.getTime() ); } } ","date":"2021-06-12","objectID":"/first_post/:7:0","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"实现接口 简而言之，就是匿名实现一个接口，并直接获得一个其实现后的匿名对象 由于在接口中不能存在构造函数，如果用匿名内部类实现接口，就不能有任何构造参数 ","date":"2021-06-12","objectID":"/first_post/:8:0","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"其他 尽管没有办法使用构造器，但是仍然可以在类中使用由{ }包裹的构造区块 参考文献 Java 核心技术卷1 - 豆瓣 附 谢谢您的阅读。第一次写作，难免出现错漏，还请大家多多包涵。 关于文章有任何的问题，可以在后台留言哦！ ","date":"2021-06-12","objectID":"/first_post/:9:0","tags":null,"title":"First_post","uri":"/first_post/"}]